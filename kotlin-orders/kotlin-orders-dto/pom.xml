<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.mvv.bank</groupId>
    <artifactId>kotlin-bank-orders</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>kotlin-bank-orders-dto</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Kotlin version of bank orders app</name>

  <properties>
    <project.displayName>Kotlin version of bank orders app</project.displayName>

    <!--
    <base-package>com.mvv.bank.account.soa</base-package>
    <base-package-path>com/mvv/bank/account/soa</base-package-path>

    <docker-host-port>${DOCKER_HOST_ACCOUNT_SOA_PORT}</docker-host-port>
    <enable.build-docker-image>true</enable.build-docker-image>
    <enable.push-docker-image>false</enable.push-docker-image>
    <enable.generate-docker-compose-env-file>true</enable.generate-docker-compose-env-file>
    <enable.generate-docker-workspace-mode-dependencies-classpath>true</enable.generate-docker-workspace-mode-dependencies-classpath>
    -->
    <enable.generate-git-properties-file>true</enable.generate-git-properties-file>

    <enable.generate-self-signed-certs>true</enable.generate-self-signed-certs>
    <generated-dev-certs-hosts>localhost,database,${project.build.finalName}</generated-dev-certs-hosts>

    <!--
    <docker-compose-bizzare-host-volumes>
      ./target/account-soa/WEB-INF
      ./target/account-soa/WEB-INF/classes
      ./target/account-soa/WEB-INF/classes-shared
      ./target/account-soa/WEB-INF/classes-docker-shared
      ./target/account-soa/WEB-INF/classes-account-soa-api
      ./target/spring-boot/lib-provided/
    </docker-compose-bizzare-host-volumes>
    -->
  </properties>

  <dependencies>
    <!--
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
      <version>${kotlin.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
      <version>${kotlin.version}</version>
    </dependency>
    -->

    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-kotlin</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
    </dependency>

    <!-- As alternative to jackson -->
    <!--
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
    </dependency>
    -->

    <!--
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>
    -->

    <!--
    <dependency>
      <groupId>com.mvv.bank</groupId>
      <artifactId>bank-shared</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    <dependency>
      <groupId>com.mvv.bank</groupId>
      <artifactId>account-soa-api</artifactId>
      <version>${project.parent.version}</version>
    </dependency>

    <dependency>
      <groupId>com.mvv.bank</groupId>
      <artifactId>container-secrets</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-json</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-to-slf4j</artifactId>
        </exclusion>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-autoconfigure</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j2</artifactId>
      <version>${spring-boot.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jersey</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!--
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>javax.ws.rs-api</artifactId>
      <version>2.1.1</version>
    </dependency>
    -->
    <dependency>
      <groupId>jakarta.validation</groupId>
      <artifactId>jakarta.validation-api</artifactId>
      <!--<version>2.0.2</version>-->
    </dependency>
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <!--<version>9.1.0</version>-->
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Dev mode -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>

    <!--
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    -->

    <!-- Prod -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>

    <!-- Test dependencies -->
    <!-- jupiter, assertj, mockito are picked from below spring-boot testing dependencies.
         Their versions are configured in <dependencyManagement> of parent pom.xml
      -->
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-test</artifactId>
      <version>${spring-boot.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-test-autoconfigure</artifactId>
      <version>${spring-boot.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <version>${spring-security.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito.kotlin</groupId>
      <artifactId>mockito-kotlin</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    <!--
    <dependency>
      <groupId>com.mvv.bank</groupId>
      <artifactId>container-runtime</artifactId>
      <version>${project.parent.version}</version>
      <scope>test</scope>
    </dependency>
    -->
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <finalName>${project.artifactId}</finalName>

    <pluginManagement>
      <plugins>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <!--
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/integration/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-resource</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/integration/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>create-temp-directories</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>bsh-property</goal>
            </goals>
            <configuration>
              <source><![CDATA[
              // TODO: fix k8s volume to avoid using host directory
              // temporary solution to avoid later creating this dir by root/docker user
              for (int i=0; i<10; i++) {
                new File(project.getBasedir(), "target/k8s/data/postgres-data-volume-" + i + "/").mkdirs();
              }
              ]]></source>
            </configuration>
          </execution>
          -->
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <parameters>true</parameters>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>

        <configuration>
          <compilerPlugins>
            <plugin>jpa</plugin>
            <!--<plugin>all-open</plugin>-->
            <plugin>spring</plugin>
            <!--<plugin>lombok</plugin>-->
            <!--<plugin>kapt</plugin>-->
          </compilerPlugins>

          <nowarn>false</nowarn>  <!-- Disable/enable warnings -->
          <args>
            <arg>-java-parameters</arg>
            <arg>-Xjsr305=strict</arg> <!-- Enable strict mode for JSR-305 annotations -->
            <arg>-Xemit-jvm-type-annotations</arg>
            <arg>-Xjvm-default=all</arg>
            <!--<arg>-Xnullability-annotations=@<package-name>:<report-level></arg>-->
            <!--<arg>-Xnullability-annotations=strict</arg>-->
          </args>
          <jvmTarget>${kotlin.compiler.jvmTarget}</jvmTarget>
          <myIncremental>${kotlin.compiler.incremental}</myIncremental>
          <pluginOptions>
            <!--
            <option>all-open:annotation=javax.persistence.Entity</option>
            <option>all-open:annotation=javax.persistence.MappedSuperclass</option>
            <option>all-open:annotation=javax.persistence.Embeddable</option>
            -->
          </pluginOptions>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-noarg</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
          <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
          </dependency>
          <!--<dependency>-->
          <!--  <groupId>org.jetbrains.kotlin</groupId>-->
          <!--  <artifactId>kotlin-maven-lombok</artifactId>-->
          <!--  <version>${kotlin.version}</version>-->
          <!--</dependency>-->
          <!--<dependency>-->
          <!--  <groupId>org.projectlombok</groupId>-->
          <!--  <artifactId>lombok</artifactId>-->
          <!--  <version>${lombok.version}</version>-->
          <!--</dependency>-->
        </dependencies>

        <executions>
          <!--<execution>-->
          <!--  <id>kapt</id>-->
          <!--  <goals>-->
          <!--    <goal>kapt</goal>-->
          <!--  </goals>-->
          <!--  <configuration>-->
          <!--    &lt;!&ndash;<args>  - -illegal-access=permit</args>&ndash;&gt;-->
          <!--    <sourceDirs>-->
          <!--      <sourceDir>src/main/kotlin</sourceDir>-->
          <!--      <sourceDir>src/main/java</sourceDir>-->
          <!--    </sourceDirs>-->
          <!--    <annotationProcessorPaths>-->
          <!--      &lt;!&ndash; Specify your annotation processors here. &ndash;&gt;-->
          <!--      <annotationProcessorPath>-->
          <!--        <groupId>com.google.dagger</groupId>-->
          <!--        <artifactId>dagger-compiler</artifactId>-->
          <!--        <version>2.40.1</version>-->
          <!--      </annotationProcessorPath>-->
          <!--    </annotationProcessorPaths>-->
          <!--  </configuration>-->
          <!--</execution>-->
          <execution>
            <id>compile</id>
            <phase>process-sources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>

          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- TODO: enable later -->
      <!--
      <plugin>
        <groupId>com.mvv.bank</groupId>
        <artifactId>generate-certificates-maven-plugin</artifactId>
        <version>${project.parent.version}</version>
        <executions>
          <execution>
            <id>generate-ssl-certificates</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>generate-certificates</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <enabled>${enable.generate-self-signed-certs}</enabled>
          <hosts>${generated-dev-certs-hosts}</hosts>
        </configuration>
      </plugin>
      -->

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <configuration>
          <!--<docker></docker> &lt;!&ndash; TODO: try to use docker from there &ndash;&gt;-->
          <!--<image>???</image>-->
          <!--<imageBuilder></imageBuilder>-->
          <!--<imageName></imageName>-->
          <!--<runImage></runImage>-->

          <!--<environmentVariables></environmentVariables>-->
          <!--<executable></executable>-->
          <!--<finalName></finalName>-->

          <!--<jmxName></jmxName>-->
          <!--<jmxPort></jmxPort>-->

          <layout>JAR</layout>
          <mainClass>com.mvv.bank.account.soa.SoaWebAppKt</mainClass>

          <!-- TODO: why I need it??? -->
          <!--<jvmArguments>-->
          <!--  -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:8000-->
          <!--  -Dserver.port=${docker-host-port}-->
          <!--  -Dserver.ssl.key-alias=${project.build.finalName}-->
          <!--  ${spring-boot-ssl-shared-system-pros}-->
          <!--</jvmArguments>-->
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      <plugin>
        <groupId>com.mvv.bank</groupId>
        <artifactId>docker-compose-maven-plugin</artifactId>
        <version>${project.parent.version}</version>
        <executions>
          <execution>
            <id>build</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
          <execution>
            <id>up</id>
            < ! - - <phase>pre-integration-test</phase> - - >
            <phase>none</phase>
            <goals>
              <goal>up</goal>
            </goals>
          </execution>
          <execution>
            <id>down</id>
            < ! - - <phase>post-integration-test</phase> - - >
            <phase>none</phase>
            <goals>
              <goal>down</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dockerRegistryTypes>${dockerRegistryTypes}</dockerRegistryTypes>
          <imagePrefix>${docker-image-prefix}</imagePrefix>
          <includedProjectAttributesAsBuildArgsFilter>
            PROJECT_BUILD_FINAL_NAME,
            DOCKER_BASE_JAVA_IMAGE,
          </includedProjectAttributesAsBuildArgsFilter>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.mvv.bank</groupId>
        <artifactId>k8s-light-maven-plugin</artifactId>
        <version>${project.parent.version}</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>minikube-k8s-prepare</goal>
            </goals>
            <configuration>
              <k8sEngineTypes>${k8sEngineTypes}</k8sEngineTypes>
            </configuration>
          </execution>
        </executions>
        <configuration>
          < ! - - for apply/delete goals - - >
          <k8sEngineType>minikube</k8sEngineType>
        </configuration>
      </plugin>
      -->

      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <version>${groovy-maven-plugin.version}</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <source>
                log.info('Test message: {}', 'Hello, World!')
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <configuration>
          <excludes>
            <exclude>**/*ITTest*</exclude>
            <exclude>**/*ITest*</exclude>
            <exclude>**/*Integration*</exclude>
          </excludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <includes>
            <include>**/*ITTest*</include>
            <include>**/*ITest*</include>
            <include>**/*Integration*</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
