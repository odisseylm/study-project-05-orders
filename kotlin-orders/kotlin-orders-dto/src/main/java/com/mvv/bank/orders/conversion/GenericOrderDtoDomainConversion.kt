package com.mvv.bank.orders.conversion

import com.mvv.bank.orders.domain.OrderType as DomainOrderType


/**
 * T O D O: If you MapStruct expert please say how to avoid this complicated approach with mixin
 * (for using toDto/toDomain for any order type).
 *
 * Mixin for mapping orders only by two methods toDto/toDomain.
 */
interface GenericOrderDtoDomainConversion<
        DtoBaseOrder,
        DtoOrder: DtoBaseOrder,
        DtoOrderType,
        DomainOrder: DomainBaseOrder,
        DomainMarketOrder: DomainOrder,
        DomainLimitOrder: DomainOrder,
        DomainStopOrder: DomainOrder,
        > {

    // *****************************************************************************************
    // These methods should be implemented or generated by MapStruct in resulting order mapper.
    // *****************************************************************************************
    // Helpful methods.
    fun orderTypeToDomain(source: DtoOrderType): DomainOrderType
    fun getOrderType(source: DtoBaseOrder): DtoOrderType
    // *****************************************************************************************
    fun marketOrderToDto(source: DomainMarketOrder): DtoOrder
    fun limitOrderToDto(source: DomainLimitOrder): DtoOrder
    fun stopOrderToDto(source: DomainStopOrder): DtoOrder
    // *****************************************************************************************
    fun dtoToMarketOrder(source: DtoOrder): DomainMarketOrder
    fun dtoToLimitOrder(source: DtoOrder): DomainLimitOrder
    fun dtoToStopOrder(source: DtoOrder): DomainStopOrder
    // *****************************************************************************************


    // T O D O: can we do it better without this switch?
    @Suppress("UNCHECKED_CAST")
    fun toDto(source: DomainOrder): DtoOrder =
        when (source.orderType) {
            DomainOrderType.MARKET_ORDER -> marketOrderToDto(source as DomainMarketOrder)
            DomainOrderType.LIMIT_ORDER  -> limitOrderToDto(source as DomainLimitOrder)
            DomainOrderType.STOP_ORDER   -> stopOrderToDto(source as DomainStopOrder)
        }

    // T O D O: can we do it better without this switch?
    fun toDomain(source: DtoOrder): DomainOrder =
        when (orderTypeToDomain(getOrderType(source))) {
            DomainOrderType.MARKET_ORDER -> dtoToMarketOrder(source)
            DomainOrderType.LIMIT_ORDER  -> dtoToLimitOrder(source)
            DomainOrderType.STOP_ORDER   -> dtoToStopOrder(source)
        }
}
