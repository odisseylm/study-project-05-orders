
Scala macros DEBUG dumpTerm => expr ['{ ... }], [v1 match {
  case com.mvv.scala.temp.tests.macros2.TestEnum1.TestEnumValue1 =>
    com.mvv.scala.temp.tests.macros2.TestEnum2.TestEnumValue1
  case com.mvv.scala.temp.tests.macros2.TestEnum1.TestEnumValue2 =>
    com.mvv.scala.temp.tests.macros2.TestEnum2.TestEnumValue2
}], as term [

Inlined(
  EmptyTree,
  List(),
  Match(
    Ident(v1),
    List(
      CaseDef(
        Select(Ident(TestEnum1), TestEnumValue1),
        EmptyTree,
        Block(
          List(),
          Select(Ident(TestEnum2), TestEnumValue1)
        )
      ),
      CaseDef(
        Select(Ident(TestEnum1),TestEnumValue2),
        EmptyTree,
        Block(
          List(),
          Select(Ident(TestEnum2),TestEnumValue2))
      )
    )
  )
)




Inlined(
  EmptyTree,
  List(),
  Block(
    List(
      DefDef(
        $anonfun,
        List(
          List(     <=========== params
            ValDef( <===========================
              vvvv,
              TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class macros2)),
                  class TestEnum1)], <============ param type
              EmptyTree))
        ),
        TypeTree[
          TypeRef(
            ThisType(TypeRef(NoPrefix,module class macros2)),
            class TestEnum2  <============= return type
          )
        ],
        Match(
          Ident(vvvv),
          List(
            CaseDef(Select(Ident(TestEnum1),TestEnumValue1),EmptyTree,Block(List(),Select(Ident(TestEnum2),TestEnumValue1))),
            CaseDef(Select(Ident(TestEnum1),TestEnumValue2),EmptyTree,Block(List(),Select(Ident(TestEnum2),TestEnumValue2)))
          )
        )
      )
    ),
    Closure(List(),Ident($anonfun),EmptyTree)
  )
)



matchCases += CaseDef(Literal(IntConstant(c.ordinal)), None, handler.asTerm)
case CaseDef(Bind(_, Ident(nme.WILDCARD)), EmptyTree, _) => true

val tpt = Inferred(TypeRepr.of[JsString])
val pattern = TypedOrTest(tree, tpt)
CaseDef(pattern, None, Ref(tpe.termSymbol))



Inlined(
  EmptyTree,
  List(),
  Block(
    List(
      DefDef(
        $anonfun,
        List(
          List(
            ValDef(
              vvvv,
              TypeTree[TypeRef(
                ThisType(TypeRef(NoPrefix,module class macros2)),
                class TestEnum1
              )],
              EmptyTree
            )
          )
        ),
        TypeTree[
          TypeRef(
            ThisType(TypeRef(NoPrefix,module class macros2)),
            class TestEnum2
          )
        ],
        Match(
          Ident(vvvv),
            List(
              CaseDef(
                Select(Select(Select(Select(Select(Select(Select(Ident(com),mvv),scala),temp),tests),macros2),TestEnum1),TestEnumValue1),
                EmptyTree,
                Block(
                  List(),
                  Select(Select(Select(Select(Select(Select(Select(Ident(com),mvv),scala),temp),tests),macros2),TestEnum2),TestEnumValue1)
                )
              ),
             CaseDef(Select(Select(Select(Select(Select(Select(Select(Ident(com),mvv),scala),temp),tests),macros2),TestEnum1),TestEnumValue2),EmptyTree,Block(List(),Select(Select(Select(Select(Select(Select(Select(Ident(com),mvv),scala),temp),tests),macros2),TestEnum2),TestEnumValue2))))))),Closure(List(),Ident($anonfun),EmptyTree)))

// 'for' loop
Apply(
  TypeApply(
    Select(Apply(TypeApply(
      Select(Ident(List),apply),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Int)])),
      List(Typed(SeqLiteral(
            List(Literal(Constant(1)), Literal(Constant(2))),
            TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Int)]
          ),
          TypeTree[
            AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),<repeated>),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Int)))]
          ))
      ),
      foreach
      ),
      List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Int)])
  ),
  List(Block(List(DefDef(
    $anonfun,
    List(
      List(
        ValDef(
          var345,
          TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Int)],
          EmptyTree
        )
      )
    ),
  TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Int)],Block(List(),Ident(var345)))),
  Closure(List(),Ident($anonfun),EmptyTree))))

// 'throw'
Apply( Ident(throw),
  List( Apply(
      Select( New(Ident(IllegalStateException)), <init> ),
      List(Literal(Constant(Some error.)))
    )))



Inlined(
  EmptyTree,
  List(),
  Apply(
    TypeApply(
      Select(Ident(Tuple2),apply),
      List(
        TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11)],
        TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)]
      )
    ),
    List(
      Select(Ident(TestEnum11),TestEnumValue3),
      Select(Ident(TestEnum12),TestEnumValue4)
    )
  )
)


Inlined(
  EmptyTree,
  List(),
  Typed(
    SeqLiteral(
      List(
        Apply(
          TypeApply(
            Select(
              Ident(Tuple2),apply),
              List(
                TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11)],
                TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)]
              )
            ),
            List(
              Select(Ident(TestEnum11),TestEnumValue3),
              Select(Ident(TestEnum12),TestEnumValue4)
            )
          )
        ),
        TypeTree[
          AppliedType(
            TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Tuple2),
            List(
              TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11),
              TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)
            )
          )
        ]),
        TypeTree[
          AppliedType(
            TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),
            List(
              AppliedType(
                TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),Tuple2),
                List(
                  TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11),
                  TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)
                )
              )
            )
          )
        ]
  )
)



Apply(
  TypeApply(
    Select(
      Ident(List),apply),
      List(
        TypeTree[
          AppliedType(
            TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
            List(
              TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11),
              TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)
            )
          )
        ]
      )
    ),
    List(
      Typed(
        SeqLiteral(List(
          Apply(
            TypeApply(
              Select(Ident(Tuple2),apply),
              List(
                TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11)],
                TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)]
              )
            ),
            List(
              Select(Ident(TestEnum11),TestEnumValue3),
              Select(Ident(TestEnum12),TestEnumValue4)
            )
          )),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11), TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11), TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)))))])
  )
)


     (TestEnum11.TestEnumValue1, TestEnum12.TestEnumValue2)
  :: (TestEnum11.TestEnumValue2, TestEnum12.TestEnumValue1)
  :: (TestEnum11.TestEnumValue3, TestEnum12.TestEnumValue4)
  :: Nil

Block(
  List(
    ValDef(
      elem$6,
      TypeTree[
        AppliedType(
          TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
          List(
            TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11),
            TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)
          )
        )
      ],
      Apply(
        TypeApply(
          Select(Ident(Tuple2),apply),
          List(
            TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11)],
            TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)]
          )
        ),
        List(
+         Select(Ident(TestEnum11),TestEnumValue1),
+         Select(Ident(TestEnum12),TestEnumValue2)
        )
      )
    )
  ),
  Apply(
    TypeApply(
      Select(
        Block(
          List(
            ValDef(
              elem$5,
              TypeTree[
                AppliedType(
                  TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
                  List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11),
                  TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)))
                ],
                Apply(
                  TypeApply(
                    Select(Ident(Tuple2),apply),
                    List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11)],
                         TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)]
                    )
                  ),
                  List(
+                   Select(Ident(TestEnum11),TestEnumValue2),
+                   Select(Ident(TestEnum12),TestEnumValue1)
                  )
                )
              )
            ),
            Apply(
              TypeApply(
                Select(
                  Block(
                    List(
                      ValDef(
                        elem$4,
                        TypeTree[
                          AppliedType(
                            TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
                            List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11),
                                 TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)
                            )
                          )
                        ],
                        Apply(
                          TypeApply(
                            Select(Ident(Tuple2),apply),
                            List(TypeTree[
                              TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11)
                            ],
                            TypeTree[
                              TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)
                            ]
                          )
                        ),
                        List(
+                         Select(Ident(TestEnum11),TestEnumValue3),
+                         Select(Ident(TestEnum12),TestEnumValue4)
                        )
                      )
                    )
                  ),
                  Apply(TypeApply(Select(Ident(Nil),::),List(TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11), TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)))])),List(Ident(elem$4)))),::),List(TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11), TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)))])),List(Ident(elem$5)))),::),List(TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),List(TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum11), TypeRef(ThisType(TypeRef(NoPrefix,module class mappers)),class TestEnum12)))])),List(Ident(elem$6))))




Inlined(
  EmptyTree,
  List(),
  Apply(
    TypeApply(
      Select(
        Ident(Option),
        apply
      ),
      List( TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String)] )
    ),
    List( Ident(v) )
  )
)


Apply(
  Select(
    Select(
      Select(
        Select(
          Select(
            Ident(org),
              mvv
            ),
          scala
        ),
      quotes
    ),quotesTypes$package),isQuotesType),List(Ident(tree), Literal(Constant(Apply)))))


Inlined(
  EmptyTree,
  List(),
  Apply(
    TypeApply(
      Select(
        Select(
          Select(Select(Select(Select(Ident(org),mvv),scala),tools),props), // package
          NamedValue // object
        ),
        apply
      ),
      List(Ident(Int))
    ),
    List(
      Literal(Constant(prop1)),
      Literal(Constant(123))
    )
  )
)


val fff: List[(String, ()=>Boolean)] =  org.mvv.scala.mapstruct.debug.dump.dumpExpr(
  List(
    ("val1", () => isInitialized(val1)),
    ("val2", () => isInitialized(val2)),
  )
)

scala.List.apply[scala.Tuple2[java.lang.String, scala.Function0[scala.Boolean]]](
  scala.Tuple2.apply[java.lang.String, scala.Function0[scala.Boolean]]
    ("val1",
     (() => org.mvv.scala.tools.props.LateInitPropsTest$package.isInitialized(LateInitPropsTest.this.val1))),
  scala.Tuple2.apply[java.lang.String, scala.Function0[scala.Boolean]]
    ("val2",
     (() => org.mvv.scala.tools.props.LateInitPropsTest$package.isInitialized(LateInitPropsTest.this.val2)))
)

Inlined(
  EmptyTree,
  List(),
  Apply(
    TypeApply(
      Select(Ident(List),apply),
      List(
        TypeTree[
          AppliedType(
            TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
            List(
              TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String),
              AppliedType(
                TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function0),
                List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean))
              )
            )
          )
        ]
      )
    ),
    List(
      Typed(
        SeqLiteral(
          List(
            Apply(
              TypeApply(
                Select(Ident(Tuple2),apply),
                List(
                  TypeTree[ TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String) ],
                      TypeTree[
                        AppliedType(
                          TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function0),
                          List(
                            TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)
                          )
                        )
                      ]
                    )
                  ),
                  List(
                    Literal(Constant(val1)),
                    Block(
                      List(
                        DefDef(
                          $anonfun,List(List()),
                          TypeTree[
                            TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)
                          ],
                          Apply(
                            Ident(isInitialized),
                            List(
                              Select(
                                This(
                                  Ident(LateInitPropsTest)
                                ),
                                val1
                              )
                            )
                          )
                        )
                      ),
                      Closure(List(),Ident($anonfun),EmptyTree))
                  )
                ),
                Apply(TypeApply(Select(Ident(Tuple2),apply),List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String)], TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function0),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)))])),List(Literal(Constant(val2)), Block(List(DefDef($anonfun,List(List()),TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)],Apply(Ident(isInitialized),List(Select(This(Ident(LateInitPropsTest)),val2))))),Closure(List(),Ident($anonfun),EmptyTree)))
              )
            ),
            TypeTree[
              AppliedType(
                TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
                List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function0),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)))
              )
            )
          ]
        ),
    TypeTree[
      AppliedType(
        TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),
        List(
          AppliedType(
            TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Tuple2),
            List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function0),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)))
          )
        )
      )
    )
  ]
)
)))



scala.Tuple2.apply[java.lang.String, scala.Function0[scala.Boolean]]("1", (() => true))

Inlined(
  EmptyTree,
  List(),
  Apply(
    TypeApply(
      Select(
        Ident(Tuple2),apply
      ),
      List(
        TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String)],
        TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)), trait Function0),
          List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)))]
      )
    ),
    List(
      Literal(Constant(1)),
       Block(List(DefDef($anonfun,List(List()),TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Boolean)],Literal(Constant(true)))),Closure(List(),Ident($anonfun),EmptyTree)))))



